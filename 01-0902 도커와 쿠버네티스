도커와 쿠버네티스

2021년 1월 5일 화요일

오후 2:22

 

-   도커, 쿠버네티스에 대한 간략한 개관

 

출발

-   chroot

    -   게스트 User에게 독립된 루트 제공

-   namespace, cgroup

    -   Namespace : 프로세스 독립 => pid가 같을 수 있다.

    -   Cgroup : control group, 하드웨어 자원 분배

> <img src="media/image1.png" style="width:5in;height:1.91667in" />

 

1.  LXC 란?

    1.  리눅스에서, 단일 호스트에 여러 개 고립된 리눅스 시스템을 실행하기 위한 운영체제 레벨에서의 가상화 방법.

    2.  운영 환경에 대해 완벽한 고립을 제공

    3.  다양한 실행 드라이버 존재 (초반에는 도커도 LXC 기반)

    4.  구성요소

        1.  liblxc 라이브러리

        -   API의 프로그래밍 언어 바인딩 :

            -   python3 (lxc 내, 1.0.x와 2.0.x에서 장기 지원 (LTS, long term support))

            -   lua (lxc 내, 1.0.x와 2.0.x에서 장기 지원)

            -   [Go](https://github.com/lxc/go-lxc)

            -   [ruby](https://github.com/lxc/ruby-lxc)

            -   [python3](https://github.com/lxc/python3-lxc)

            -   [Haskell](https://github.com/fizruk/lxc)

        -   컨테이너 제어를 위한 표준 도구 세트

        -   배포판용 컨테이너 템플릿

    <!-- -->

    1.  <https://www.44bits.io/ko/keyword/linux-container#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%9F%B0%ED%83%80%EC%9E%84>

<!-- -->

1.  컨테이너 런타임

    1.  도커 vs LXC

        1.  <img src="media/image2.png" style="width:5in;height:2in" />

        2.  도커에는 캡처 기능 존재(컨테이너 이미지)

        3.  LXC -> libcontainer로 변경

    <!-- -->

    1.  종류

        1.  도커(containerd)

        2.  Runc

            1.  경량 컨테이너 런타임

        <!-- -->

        1.  CRI-O

            1.  크리-오

            2.  쿠버네티스용 경량 컨테이너 런타임

        <!-- -->

        1.  Podman

            1.  <img src="media/image3.png" style="width:5in;height:2.08333in" />

            2.  Docker engine 정도 역할.

    <!-- -->

    1.  OCI스펙

        1.  컨테이너 관리도구 표준

<!-- -->

1.  도커란?

    1.  Dockerd (도커 데몬), docker(도커 클라이언트), 이미지 저장소 등으로 구성

    2.  한계

        1.  Docker Daemon의 존재

            1.  호스트의 다른 이유로 OS 자원 할당이 어려울 때, 도커 위의 어플리케이션 모두 동작하지 않음.

            2.  대안 : Podman 등

                1.  Podman : Daemonless, 데몬 없이 컨테이너 동작 가능

    <!-- -->

    1.  Dockerd의 역할?

> Docker Daemon은 HTTP 기반 REST API를 제공하여 Docker Client가 Container를 제어하고 이용할 수 있게한다. Docker Client로부터 받은 요청중에서 대부분은 dockerd가 구동시킨 containerd에게 처리를 위임하고, 일부 요청만 직접 처리한다. dockerd는 containerd 구동, Docker Image Build (Dockerfile), Container Network 설정 (Bridge, iptables), Container Log 기록, docker-proxy 구동 등의 역할을 수행한다.
>
> Docker Daemon의 REST API는 기본적으로 "/var/run/docker.sock" 파일의 Unix Domain Socket을 통해서 제공되며 Docker Daemon의 Opiton을 변경을 통해서 TCP Socket을 이용하도록 변경할 수도 있다.

1.  Docker Swarm?

    1.  위에서 말한 TCP Socket을 이용하도록 하여, Rest API 환경에서 여러 Docker 실행 호스트들을 관리, 컨테이너들에 대한 간단한 Orchestration 제공

    2.  레플리카, Rolling 배포 등 기능 지원

    3.  오버레이 네트워크 (ingress) 제공

<!-- -->

1.  Docker Compose?

    1.  Docker 이미지를 쉽게 제작할 수 있도록 한 자동화 환경

    2.  Docker 환경에 대한 설정, Execution 포인트 등 제공

 

 

1.  쿠버네티스?

    1.  컨테이너 오케스트레이션 툴

        1.  <img src="media/image4.png" style="width:10.16667in;height:4.75in" alt="Kubernetes cluster Node O O Control Plane Node O O Cloud provider Node O O API sewer cmtro kube -proxy Scheduler Control plane Node " />

    <!-- -->

    1.  자세한건 배워나가자!
